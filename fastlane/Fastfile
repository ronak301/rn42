require 'httparty'

fastlane_version "1.95.0"
default_platform :ios

before_all do
  # put here your token and iOS scheme app
  ENV["GITHUB_TOKEN"] = ""
  ENV["APPETIZE_TOKEN"] = "tok_fpvmfzqk3u4zdqq9a4mj8txht8"
  ENV["APP_IOS_SCHEME"] = "rn42"

  # get the last git commit information
  ENV["GIT_COMMIT"] = last_git_commit[:commit_hash]

  # Use ghprbSourceBranch env variable on CI, git_branch lane elsewhere
  if !ENV["ghprbSourceBranch"]
    ENV["ghprbSourceBranch"] = git_branch
  end

end


private_lane :githubStatusUpdate do |options|

  response = HTTParty.post(
    "https://github.com/api/v3/repos/ronak301/rn42/statuses/#{ENV["GIT_COMMIT"]}?access_token=#{ENV["GITHUB_TOKEN"]}",
    :body => {
      :context => options[:context],
      :state => options[:state],
      :description => options[:description],
      :target_url => options[:url]
    }.to_json,
    :headers => { 'Content-Type' => 'application/json' }
  )
end


# get the publicKey of the appetizeApp corresponding to your git branch
private_lane :getAppetizePublicKey do |options|
  publicKey = ""

  response = HTTParty.get("https://#{ENV["APPETIZE_TOKEN"]}@api.appetize.io/v1/apps")
  json = JSON.parse(response.body)

  # Find branch name in notes
  json["data"].each do |value|
    if value["note"] == ENV["ghprbSourceBranch"] && value["platform"] == options[:platform]
      publicKey = value["publicKey"]
    end
  end

  publicKey
end


platform :ios do

  desc "Deployment iOS lane"

    lane :deployAppetize do

      githubStatusUpdate(
        context: 'Appetize iOS',
        state: 'pending',
        url: "https://appetize.io/dashboard",
        description: 'iOS build in progress'
      )

      Dir.chdir "../ios" do
        tmp_path = "/tmp/fastlane_build"

        #seems not possible to use gym to do the simulator release ?
        xcodebuild_configs = {
          configuration: "Release",
          sdk: "iphonesimulator",
          derivedDataPath: tmp_path,
          xcargs: "CONFIGURATION_BUILD_DIR=" + tmp_path,
          scheme: "#{ENV["APP_IOS_SCHEME"]}"
        }

        Actions::XcodebuildAction.run(xcodebuild_configs)

        app_path = Dir[File.join(tmp_path, "**", "*.app")].last

        zipped_bundle = Actions::ZipAction.run(path: app_path, output_path: File.join(tmp_path, "Result.zip"))

        Actions::AppetizeAction.run(
          path: zipped_bundle,
          api_token: "#{ENV["APPETIZE_TOKEN"]}",
          platform: "ios",
          note: "#{ENV["ghprbSourceBranch"]}",
          public_key: getAppetizePublicKey({platform: "ios"})
        )

        FileUtils.rm_rf(tmp_path)

      end

      githubStatusUpdate(
        context: 'Appetize iOS',
        state: 'success',
        url: "#{lane_context[SharedValues::APPETIZE_APP_URL]}",
        description: 'iOS build succeed'
      )
    end

    error do |lane, exception|
      case lane
        when /deployAppetize/
          githubStatusUpdate(
            context: 'Appetize iOS',
            state: 'failure',
            url: "https://appetize.io/dashboard",
            description: 'iOS build failed'
          )
        end
      end
end
